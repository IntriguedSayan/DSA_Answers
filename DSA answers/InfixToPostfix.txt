 public static String infixToPostfix(String infix) {
    Stack<Character> stack = new Stack<>();
    StringBuilder postfix = new StringBuilder();
    
    for(int i = 0; i < infix.length(); ++i) {
      char c = infix.charAt(i);
      
      if(Character.isLetterOrDigit(c)) {
        postfix.append(c);
      }else if(c == '(') {
        stack.push(c);
      }else if(c == ')') {
        
        while(!stack.isEmpty() && stack.peek() != '(') {
          postfix.append(stack.pop());
        }
        
        stack.pop(); // This is for opening bracket
      }else {
        
        while(!stack.isEmpty() && getPrecedence(c) <= getPrecedence(stack.peek())) {
          postfix.append(stack.pop());
        }
        
        stack.push(c);
      }
    }
    
    while(!stack.isEmpty()) {
      postfix.append(stack.pop());
    }
    
    return postfix.toString();
  }
  
  public static int getPrecedence(char op) {
    if(op == '+' || op == '-') return 1;
    else if(op == '*' || op == '/') return 2;
    else if(op == '^') return 3;
    return -1;
  }